
---------------- CREATING TABLES ---------------------
CREATE TABLE DB_USERS(
    USER_ID INT PRIMARY KEY,
    LOGIN VARCHAR(100),
    EMAIL VARCHAR(100),
    PASSWORD VARCHAR(100)
);

CREATE TABLE CART(
    CART_ID INT PRIMARY KEY,
    USER_ID INT UNIQUE,
    QUANTITY INT,
    CONSTRAINT USER_ID_CONSTRAINT FOREIGN KEY (USER_ID) REFERENCES DB_USERS(USER_ID)
);

DROP TABLE CART;
DROP TABLE DB_USERS;
DROP TABLE ITEM_IN_CART;

CREATE TABLE ITEM_IN_CART(
    ITEM_IN_CART_ID INT PRIMARY KEY,
    CART_ID INT,
    PRODUCT_ID INT,
    CONSTRAINT CART_ID_CONSTRAINT FOREIGN KEY (CART_ID) REFERENCES CART(CART_ID),
    CONSTRAINT PRODUCT_ID_CONSTRAINT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
)

CREATE TABLE PRODUCT(
    PRODUCT_ID INT PRIMARY KEY,
    PRODUCT_NAME VARCHAR(100),
    PRODUCT_MATERIAL VARCHAR(100),
    PRODUCT_SIZE VARCHAR(100),
    PRODUCT_TYPE VARCHAR(100),
		STORAGE_ID INT,
    CONSTRAINT STORAGE_ID_CONSTRAINT FOREIGN KEY (STORAGE_ID) REFERENCES STORAGE(STORAGE_ID)
);

CREATE TABLE STORAGE(
    STORAGE_ID INT PRIMARY KEY,
    ADRESS VARCHAR(100),
    COUNTRY VARCHAR(100),
    CAPACITY INT
);

CREATE TABLE DELIVERY(
    DELIVERY_ID INT PRIMARY KEY,
    ADRESS VARCHAR(200),
    PAYMENT_METHOD VARCHAR(100),
    DELIVERY_METHOD VARCHAR(100),
    DATE_OF_DELIVERY VARCHAR(100)
);

CREATE TABLE ORDERS(
    ORDER_ID INT PRIMARY KEY,
    ORDER_DATE VARCHAR(100),
    ORDER_STATUS VARCHAR(100),
    DELIVERY_ID INT,
    USER_ID INT,
    CONSTRAINT USER_ID_CONSTRAIN FOREIGN KEY (USER_ID) REFERENCES DB_USERS(USER_ID),
    CONSTRAINT DELIVERY_ID_CONSTRAIN FOREIGN KEY (DELIVERY_ID) REFERENCES DELIVERY(DELIVERY_ID)
);
DROP TABLE ORDERS;

---------------- DB_USERS TABLE ---------------------
GO
CREATE TRIGGER HASH_PASSWORD
ON DB_USERS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    
    UPDATE DB_USERS
    SET DB_USERS.PASSWORD = HASHBYTES('SHA2_256', DB_USERS.PASSWORD)
    FROM inserted
    WHERE DB_USERS.USER_ID = inserted.USER_ID;
END;


GO
CREATE PROCEDURE INSERT_USER
    @userId INT,
    @login VARCHAR(100),
    @email VARCHAR(100),
    @password VARCHAR(100)
AS
BEGIN
    INSERT INTO DB_USERS (USER_ID, LOGIN, EMAIL, PASSWORD)
    VALUES (@userId, @login, @email, @password)
END

EXEC INSERT_USER
    @userId = 4,
    @login = 'test_user4',
    @email = 'example@example.com',
    @password = 'password123';

select *from DB_USERS;

GO
CREATE FUNCTION GET_USERS()
RETURNS TABLE
AS
RETURN
    SELECT USER_ID, LOGIN, EMAIL, PASSWORD
    FROM DB_USERS;

SELECT *
FROM GET_USERS();



---------------- CART TABLE ---------------------
GO
CREATE PROCEDURE INSERT_PRODUCT_TO_CART
	@CART_ID INT,
	@USER_ID INT,
	@QUANTITY INT
AS
BEGIN
	INSERT INTO CART VALUES(@CART_ID,@USER_ID,@QUANTITY);
END

EXEC INSERT_PRODUCT_TO_CART 
	2,3,80;

SELECT* FROM CART;


GO
CREATE FUNCTION GET_CART_INFO_BY_ID(
	@CART_ID INT
)
RETURNS TABLE
AS
RETURN
    SELECT *
    FROM CART WHERE CART.CART_ID = @CART_ID;

SELECT * FROM GET_CART_INFO_BY_ID(1);


---------------- ITEM_IN_CART TABLE ---------------------
GO
	CREATE PROCEDURE INSERT_ITEM_IN_CART
		@ITEM_IN_CART_ID INT,
		@CART_ID INT,
		@PRODUCT_ID INT
	AS
	BEGIN
		INSERT INTO ITEM_IN_CART VALUES(@ITEM_IN_CART_ID,@CART_ID,@PRODUCT_ID);
	END

EXEC INSERT_ITEM_IN_CART 3,1,3;


GO
CREATE FUNCTION GET_ITEMS_IN_CART()
RETURNS TABLE
AS
RETURN
    SELECT *
    FROM ITEM_IN_CART;

SELECT *
FROM GET_ITEMS_IN_CART();

---------------- PRODUCT TABLE ---------------------

GO
CREATE PROCEDURE INSERT_PRODUCT
	@PRODUCT_ID INT,
	@PRODUCT_NAME VARCHAR(100),
	@PRODUCT_MATERIAL VARCHAR(100),
	@PRODUCT_SIZE VARCHAR(100),
	@PRODUCT_TYPE VARCHAR(100),
	@STORAGE_ID INT
	AS
	BEGIN
		INSERT INTO PRODUCT VALUES(@PRODUCT_ID,@PRODUCT_NAME,@PRODUCT_MATERIAL,@PRODUCT_SIZE,@PRODUCT_TYPE,@STORAGE_ID INT);
	END

EXEC INSERT_PRODUCT 3,'TESTNAME3','TESTMATERIAL3','1M^2','ПОЛКА';
SELECT* FROM PRODUCT;

---------------- DELIVERY TABLE ---------------------
GO
CREATE PROCEDURE INSERT_DELIVERY
	@DELIVERY_ID INT,
	@ADRESS VARCHAR(200),
	@PAYMENT_METHOD VARCHAR(100),
	@DELIVERY_METHOD VARCHAR(100),
	@DATE_OF_DELIVERY VARCHAR(100)
	AS
	BEGIN
		INSERT INTO DELIVERY VALUES(@DELIVERY_ID,@ADRESS,@PAYMENT_METHOD,@DELIVERY_METHOD,@DATE_OF_DELIVERY)
	END

EXEC INSERT_DELIVERY 3,'TESTADRESS3','CASH','КУРЬЕР','2024-04-22';
SELECT* FROM DELIVERY;


---------------- ORDERS TABLE ---------------------

CREATE PROCEDURE INSERT_ORDERS
	@ORDER_ID INT,
	@ORDER_DATE VARCHAR(100),
	@ORDER_STATUS VARCHAR(100),
	@DELIVERY_ID INT,
	@USER_ID INT
	AS
	BEGIN
		INSERT INTO ORDERS VALUES(@ORDER_ID,@ORDER_DATE,@ORDER_STATUS,@DELIVERY_ID,@USER_ID);
	END

EXEC INSERT_ORDERS 4,'2024-02-30','ДОСТАВЛЕНО',1,1;
SELECT * FROM DB_USERS;
SELECT *FROM DELIVERY;
select *from ORDERS;

---------------- VIEWS ---------------------
CREATE VIEW INFORMATION_ABOUT_ORDER
	AS SELECT ORDERS.ORDER_ID,ORDERS.ORDER_DATE,ORDERS.ORDER_STATUS,DELIVERY.ADRESS,DELIVERY.PAYMENT_METHOD,DELIVERY.DELIVERY_METHOD,DELIVERY.DATE_OF_DELIVERY,DB_USERS.LOGIN,DB_USERS.EMAIL,DB_USERS.PASSWORD FROM ORDERS 
		INNER JOIN DELIVERY
			ON DELIVERY.DELIVERY_ID = ORDERS.DELIVERY_ID
		INNER JOIN DB_USERS
			ON ORDERS.USER_ID=DB_USERS.USER_ID ;

SELECT * FROM INFORMATION_ABOUT_ORDER;


------------------ LAB3 ---------------------

--#1

	ALTER TABLE STORAGE 
		ADD HIERARCHY_COLUMN hierarchyid,
				LEVEL_COLUMN AS HIERARCHY_COLUMN.GetLevel() PERSISTED;

	SELECT STORAGE_ID,ADRESS,COUNTRY,CAPACITY,HIERARCHY_COLUMN.ToString() AS NODE_AS_STRING,HIERARCHY_COLUMN AS HIERARCHY_COLUMN_BINARY,LEVEL_COLUMN FROM STORAGE;
	
	--вершина
	UPDATE STORAGE 
		SET STORAGE.HIERARCHY_COLUMN = hierarchyid::GetRoot()
		WHERE STORAGE_ID = 1;
	GO
	--первый ребенок 1-го порядка
	DECLARE @MANAGERNODE hierarchyid;
	SELECT @MANAGERNODE = HIERARCHY_COLUMN FROM STORAGE WHERE STORAGE_ID = 1;
	UPDATE STORAGE 
		SET HIERARCHY_COLUMN = @MANAGERNODE.GetDescendant(NULL,NULL)
		WHERE STORAGE_ID = 2;
	GO
	--второй ребенок 1-го порядка
	DECLARE @MANAGERNODE hierarchyid;
	DECLARE @LEVEL hierarchyid;
	SELECT @LEVEL = HIERARCHY_COLUMN FROM STORAGE WHERE STORAGE_ID = 2;
	SELECT @MANAGERNODE = HIERARCHY_COLUMN FROM STORAGE WHERE STORAGE_ID = 1;
	UPDATE STORAGE 
		SET HIERARCHY_COLUMN = @MANAGERNODE.GetDescendant(@LEVEL,NULL)
		WHERE STORAGE_ID = 3;
	GO

	--#2

		CREATE PROCEDURE DISPLAY_NODES_WITH_LEVEL(
			@NODEVALUE hierarchyid
		) AS
		BEGIN
			WITH NodeHierarchy AS
			(
					SELECT 
							HIERARCHY_COLUMN AS Node,
							HIERARCHY_COLUMN.GetLevel() AS Level
					FROM
							STORAGE
					WHERE
							HIERARCHY_COLUMN = @NODEVALUE

					UNION ALL

					SELECT 
							t.HIERARCHY_COLUMN AS Node,
							t.HIERARCHY_COLUMN.GetLevel() AS Level
					FROM
							STORAGE t
					JOIN
							NodeHierarchy nh ON t.HIERARCHY_COLUMN.GetAncestor(1) = nh.Node
			)
			SELECT 
					Node.ToString() AS NodePath,
					Level
			FROM
					NodeHierarchy;
		END;
		
		EXEC DISPLAY_NODES_WITH_LEVEL '/';

	--#3

		CREATE PROCEDURE ADDCHILDNODE(
			@PARENTNODEVALUE hierarchyid,
			@STORAGE_ID INT
		)AS
		BEGIN
				DECLARE @CHILDNODEVALUE hierarchyid;
				DECLARE @MAXCHILDVALUE hierarchyid;

				-- максим узел на текущем уровне родительского узла
				SELECT @MAXCHILDVALUE = MAX(HIERARCHY_COLUMN) 
					FROM STORAGE 
						WHERE HIERARCHY_COLUMN.GetAncestor(1) = @PARENTNODEVALUE;

				SET @CHILDNODEVALUE = @PARENTNODEVALUE.GetDescendant(@MAXCHILDVALUE, NULL);

				INSERT INTO STORAGE (STORAGE_ID, HIERARCHY_COLUMN)
					VALUES (@STORAGE_ID, @CHILDNODEVALUE);
		END

		DROP PROCEDURE ADDCHILDNODE;

		EXEC AddChildNode '/1/2/',12;


		SELECT STORAGE_ID,ADRESS,COUNTRY,CAPACITY,HIERARCHY_COLUMN.ToString() AS NODE_AS_STRING,HIERARCHY_COLUMN AS HIERARCHY_COLUMN_BINARY,LEVEL_COLUMN FROM STORAGE;

	--#4
		CREATE OR ALTER PROCEDURE MOVECHILDNODES(
    @OldParentNodeValue HIERARCHYID,
    @NewParentNodeValue HIERARCHYID
		)AS
		BEGIN 
				DECLARE @MaxNodeValue HIERARCHYID;
				DECLARE @CurrentNode HIERARCHYID;
				DECLARE @CursorNode CURSOR;
				DECLARE @ChildNew HIERARCHYID;

				BEGIN TRY
						SET @CursorNode = CURSOR FOR 
						SELECT HIERARCHY_COLUMN 
						FROM STORAGE
						WHERE HIERARCHY_COLUMN.GetAncestor(1) = @OldParentNodeValue 
						ORDER BY HIERARCHY_COLUMN;

						OPEN @CursorNode;

						FETCH NEXT FROM @CursorNode INTO @CurrentNode;
						WHILE @@FETCH_STATUS = 0
						BEGIN
    
				select @ChildNew = @NewParentNodeValue.GetDescendant(MAX(HIERARCHY_COLUMN), NULL)
				from STORAGE where HIERARCHY_COLUMN.GetAncestor(1) = @NewParentNodeValue;
           
								UPDATE STORAGE
								SET HIERARCHY_COLUMN = HIERARCHY_COLUMN.GetReparentedValue(@CurrentNode, @ChildNew) 
					WHERE HIERARCHY_COLUMN.IsDescendantOf(@CurrentNode) = 1;

								FETCH NEXT FROM @CursorNode INTO @CurrentNode;
						END;

						CLOSE @CursorNode;

						PRINT 'Узлы успешно перемещены.';
				END TRY
				BEGIN CATCH
						PRINT 'Ошибка: Невозможно переместить узлы.';
				END CATCH;
		END;

		commit;
		BEGIN TRANSACTION
		EXEC MOVECHILDNODES '/2/', '/1/' ;
		EXEC DISPLAY_NODES_WITH_LEVEL '/';

		SELECT HIERARCHY_COLUMN.ToString()
						FROM STORAGE
							WHERE HIERARCHY_COLUMN.IsDescendantOf('/') = 1;

		SELECT STORAGE_ID,ADRESS,COUNTRY,CAPACITY,HIERARCHY_COLUMN.ToString() AS NODE_AS_STRING,HIERARCHY_COLUMN AS HIERARCHY_COLUMN_BINARY,LEVEL_COLUMN FROM STORAGE;
		ROLLBACK;



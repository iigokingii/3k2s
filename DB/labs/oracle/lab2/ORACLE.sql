-- Creating tables
CREATE TABLE DB_USERS(
    USER_ID NUMBER PRIMARY KEY,
    LOGIN VARCHAR2(100),
    EMAIL VARCHAR2(100),
    PASSWORD VARCHAR2(100)
);


GRANT CREATE TABLE TO admin;
SELECT username FROM dba_users;


CREATE TABLE CART(
    CART_ID NUMBER PRIMARY KEY,
    USER_ID NUMBER UNIQUE,
    QUANTITY NUMBER,
    CONSTRAINT USER_ID_CONSTRAINT FOREIGN KEY (USER_ID) REFERENCES DB_USERS(USER_ID)
);

drop table cart
drop table ITEM_IN_CART;

CREATE TABLE ITEM_IN_CART(
    ITEM_IN_CART_ID NUMBER PRIMARY KEY,
    CART_ID NUMBER,
    PRODUCT_ID NUMBER,
    CONSTRAINT CART_ID_CONSTRAINT FOREIGN KEY (CART_ID) REFERENCES CART(CART_ID),
    CONSTRAINT PRODUCT_ID_CONSTRAINT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
);
DROP TABLE ITEM_IN_CART;
DROP TABLE PRODUCT;

CREATE TABLE PRODUCT(
    PRODUCT_ID NUMBER PRIMARY KEY,
    PRODUCT_NAME VARCHAR2(100),
    PRODUCT_MATERIAL VARCHAR2(100),
    PRODUCT_SIZE VARCHAR2(100),
    PRODUCT_TYPE VARCHAR2(100),
    STORAGE_ID INT,
    CONSTRAINT STORAGE_ID_CONSTRAINT FOREIGN KEY (STORAGE_ID) REFERENCES STORAGE(STORAGE_ID)
);

CREATE TABLE STORAGE(
    STORAGE_ID NUMBER PRIMARY KEY,
    ADRESS VARCHAR2(100),
    COUNTRY VARCHAR2(100),
    CAPACITY NUMBER
);`
END;
/
---------------- DB_USERS TABLE ---------------------
CREATE OR REPLACE PROCEDURE INSERT_USER(
    USER_ID IN NUMBER,
    LOGIN IN VARCHAR2(100),
    EMAIL IN VARCHAR2(100),
    PASSWORD IN VARCHAR2(100)
)
AS
BEGIN
    INSERT INTO CART (USER_ID, LOGIN, EMAIL, PASSWORD) VALUES (USER_ID, LOGIN, EMAIL, PASSWORD);
    COMMIT;
END;
/

CREATE OR REPLACE TRIGGER HASH_PASSWORD
BEFORE INSERT OR UPDATE ON DB_USERS
FOR EACH ROW
BEGIN
    :NEW.PASSWORD := DBMS_CRYPTO.HASH(UTL_RAW.CAST_TO_RAW(:NEW.PASSWORD), 2);
END;
/



BEGIN
    INSERT_USER(1, 'test_user1', 'example@example.com', 'password123');
    COMMIT;
END;
/

select *from DB_USERS;

CREATE OR REPLACE FUNCTION GET_USERS
RETURN SYS_REFCURSOR
AS
    users_cursor SYS_REFCURSOR;
BEGIN
    OPEN users_cursor FOR
    SELECT USER_ID, LOGIN, EMAIL, PASSWORD
    FROM DB_USERS;
    
    RETURN users_cursor;
END;

DECLARE
    users_cursor SYS_REFCURSOR;
BEGIN
    users_cursor := GET_USERS();
    
    DBMS_SQL.RETURN_RESULT(users_cursor);
END;
/

---------------- CART TABLE ---------------------
CREATE OR REPLACE PROCEDURE INSERT_PRODUCT_TO_CART(
    cart_id IN NUMBER,
    user_id IN NUMBER,
    quantity IN NUMBER
)
AS
BEGIN
    INSERT INTO CART VALUES (cart_id, user_id, quantity);
END;
/

BEGIN
    INSERT_PRODUCT_TO_CART(2, 1, 180);
    COMMIT;
END;
/

CREATE OR REPLACE FUNCTION GET_CART_INFO_BY_ID(
    cart_id IN NUMBER
)
RETURN SYS_REFCURSOR
AS
    cart_cursor SYS_REFCURSOR;
BEGIN
    OPEN cart_cursor FOR
    SELECT *
        FROM CART
            WHERE CART.CART_ID = cart_id
            FETCH FIRST 1 ROW ONLY;
    
    RETURN cart_cursor;
END;
/

DECLARE
    cart_cursor SYS_REFCURSOR;
BEGIN
    cart_cursor := GET_CART_INFO_BY_ID(1);
    
    DBMS_SQL.RETURN_RESULT(cart_cursor);
END;
/



---------------- ITEM_IN_CART TABLE ---------------------
CREATE OR REPLACE PROCEDURE INSERT_ITEM_IN_CART(
    item_in_cart_id IN NUMBER,
    cart_id IN NUMBER,
    product_id IN NUMBER
)
AS
BEGIN
    INSERT INTO ITEM_IN_CART VALUES (item_in_cart_id, cart_id, product_id);
END;
/
BEGIN
    INSERT_ITEM_IN_CART(2, 1, 1);
    COMMIT;
END;


CREATE OR REPLACE FUNCTION GET_ITEMS_IN_CART
RETURN SYS_REFCURSOR
AS
    items_cursor SYS_REFCURSOR;
BEGIN
    OPEN items_cursor FOR
    SELECT *
    FROM ITEM_IN_CART;
    
    RETURN items_cursor;
END;
/

DECLARE
    items_cursor SYS_REFCURSOR;
BEGIN
    items_cursor := GET_ITEMS_IN_CART();
    
    DBMS_SQL.RETURN_RESULT(items_cursor);
END;
/

---------------- PRODUCT TABLE ---------------------

CREATE OR REPLACE PROCEDURE INSERT_PRODUCT(
    product_id IN NUMBER,
    product_name IN VARCHAR2,
    product_material IN VARCHAR2,
    product_size IN VARCHAR2,
    product_type IN VARCHAR2
)
AS
BEGIN
    INSERT INTO PRODUCT VALUES (product_id, product_name, product_material, product_size, product_type);
END;
/

-- ¬˚ÁÓ‚ ı‡ÌËÏÓÈ ÔÓˆÂ‰Û˚ INSERT_PRODUCT
BEGIN
    INSERT_PRODUCT(2, 'TESTNAME2', 'TESTMATERIAL3', '10M^2', 'ÿ ¿‘');
    COMMIT;
END;
/

SELECT * FROM PRODUCT;


---------------- DELIVERY TABLE ---------------------
CREATE OR REPLACE PROCEDURE INSERT_DELIVERY(
    delivery_id IN NUMBER,
    address IN VARCHAR2,
    payment_method IN VARCHAR2,
    delivery_method IN VARCHAR2,
    date_of_delivery IN VARCHAR2
)
AS
BEGIN
    INSERT INTO DELIVERY VALUES (delivery_id, address, payment_method, delivery_method, date_of_delivery);
END;
/

BEGIN
    INSERT_DELIVERY(2, 'TESTADRESS3', 'CARD', ' ”–‹≈–', '2024-04-29');
    COMMIT;
END;
/
SELECT* FROM DELIVERY;


---------------- ORDERS TABLE ---------------------

CREATE OR REPLACE PROCEDURE INSERT_ORDERS(
    order_id IN NUMBER,
    order_date IN VARCHAR2,
    order_status IN VARCHAR2,
    delivery_id IN NUMBER,
    user_id IN NUMBER
)
AS
BEGIN
    INSERT INTO ORDERS VALUES (order_id, order_date, order_status, delivery_id, user_id);
END;
/

BEGIN
    INSERT_ORDERS(5, '2024-04-29', 'ƒŒ—“¿¬À≈ÕŒ', 1, 2);
    COMMIT;
END;
/
SELECT * FROM DB_USERS;
SELECT *FROM DELIVERY;
select *from ORDERS;

---------------- VIEWS ---------------------
CREATE OR REPLACE VIEW INFORMATION_ABOUT_ORDER AS
SELECT
    ORDERS.ORDER_ID,
    ORDERS.ORDER_DATE,
    ORDERS.ORDER_STATUS,
    DELIVERY.ADRESS,
    DELIVERY.PAYMENT_METHOD,
    DELIVERY.DELIVERY_METHOD,
    DELIVERY.DATE_OF_DELIVERY,
    DB_USERS.LOGIN,
    DB_USERS.EMAIL,
    DB_USERS.PASSWORD
FROM ORDERS
    INNER JOIN DELIVERY ON DELIVERY.DELIVERY_ID = ORDERS.DELIVERY_ID
    INNER JOIN DB_USERS ON ORDERS.USER_ID = DB_USERS.USER_ID;

SELECT * FROM INFORMATION_ABOUT_ORDER;


